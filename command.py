# Pattern (шаблон) команды
# использовании единого интерфейса для описания всех типов операций, которые можно производить с системой.
# Тогда для добавления в систему поддержки новой операции достаточно реализовать предлагаемый интерфейс.
# Таким образом, каждая операция представляется самостоятельным объектом инкапсулирующим некоторый набор дополнительных свойств.
# Систем, в свою очередь, приобретает возможно выполнять дополнительный набор действий над запросами (объектами).
# Это протоколирование, отмена предыдущего действия повторение последующего и т.д.

# тип:

# Используется:
# 1. desktop-приложение c возможностями отмены и повторения действий пользователя (undo/redo).
# 2. сетевые распределенные системы использующие запросы в виде объектов в качестве основного примитива инициализации каких-либо операций.
# 3. системы с поддержкой асинхронных вызовов, инкапсулирующие обратный вызов в виде callback-объекта.

class Resolver:
    def __init__(self):
        pass
    def _command_1(self, *args, **kwargs):
        print('start command_1')
    def _command_2(self, *args, **kwargs):
        print('start command_2')

    def dispatch(self, command_code, *args, **kwargs):
        _dispatcher = {
            "COMMAND-1": self._command_1,
            "COMMAND-2": self._command_2,
        }
        try:
            return _dispatcher[command_code](*args, **kwargs)
        except KeyError:
            return None
